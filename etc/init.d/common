source "$CONFFILE"

RULE_HTTP="-t mangle -p tcp --dport 80 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:8 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num $NFQUEUE_NUM --queue-bypass"
RULE_HTTPS="-t mangle -p tcp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:8 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num $NFQUEUE_NUM --queue-bypass"
RULE_QUIC="-t mangle -p udp --dport 443 -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:8 -m mark ! --mark 0x40000000/0x40000000 -j NFQUEUE --queue-num $NFQUEUE_NUM_QUIC --queue-bypass"
RULE_MASQ="-t nat -p udp -m mark --mark 0x40000000/0x40000000 -j MASQUERADE"

is_running() {
  PID_RUNNING=$(pgrep -nx "$NFQWS_BIN" 2>/dev/null)

  if [ -z "$PID_RUNNING" ]; then
    return 1
  fi

  if [ ! -f "$PIDFILE" ]; then
    return 1
  fi

  PID_SAVED=$(cat "$PIDFILE")

  if [ "$PID_RUNNING" -ne "$PID_SAVED" ]; then
    return 1
  fi

  if ! kill -0 $(cat "$PIDFILE"); then
    return 1
  fi

  # 0 = true, 1 = false
  return 0
}

status_service() {
  if is_running; then
    echo 'Service NFQWS is running'
  else
    echo 'Service NFQWS is stopped'
  fi
}

reload_service() {
  if ! is_running; then
    echo 'Service NFQWS is not running' >&2
    return 1
  fi

  echo 'Reloading NFQWS service...'
  kill -1 $(cat "$PIDFILE")
  kill -1 $(cat "$PIDFILE_QUIC")
}

kernel_modules() {
  KERNEL=$(uname -r)

  if [ -z "$(lsmod 2>/dev/null | grep "xt_multiport ")" ]; then
    multiport_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_multiport.ko*")
    insmod "$multiport_mod_path" &> /dev/null
    echo "xt_multiport.ko loaded"
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_connbytes ")" ]; then
    connbytes_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_connbytes.ko*")
    insmod "$connbytes_mod_path" &> /dev/null
    echo "xt_connbytes.ko loaded"
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_NFQUEUE ")" ]; then
    nfqueue_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_NFQUEUE.ko*")
    insmod "$nfqueue_mod_path" &> /dev/null
    echo "xt_NFQUEUE.ko loaded"
  fi
}

_iptables_add_remove() {
  CMD=$1 # iptables or ip6tables
  ACTION=$2 # -I, -A, -D
  shift 2
  RULE="$@"

  $CMD -C $RULE 2>/dev/null
  exists=$? # 0 = true

  if [ "$ACTION" == "-A" ] || [ "$ACTION" == "-I" ]; then
    if [ $exists -ne 0 ]; then
      $CMD $ACTION $RULE
    fi
  elif [ "$ACTION" == "-D" ] && [ $exists -eq 0 ]; then
    $CMD $ACTION $RULE
  fi
}

_iptables() {
  _iptables_add_remove iptables "$@"
}

_ip6tables() {
  _iptables_add_remove ip6tables "$@"
}

firewall_start_v4() {
  for IFACE in $ISP_INTERFACE; do
    if [ -n "$HTTP_ENABLED" ] && [ "$HTTP_ENABLED" -eq "1" ]; then
      _iptables -A POSTROUTING -o $IFACE $RULE_HTTP
    fi

    if [ -z "$QUIC_ENABLED" ] || [ "$QUIC_ENABLED" -eq "1" ]; then
      _iptables -A POSTROUTING -o $IFACE $RULE_QUIC
      _iptables -A POSTROUTING -o $IFACE $RULE_MASQ
    fi

    _iptables -A POSTROUTING -o $IFACE $RULE_HTTPS
  done
}

firewall_stop_v4() {
  for IFACE in $ISP_INTERFACE; do
    if [ -n "$HTTP_ENABLED" ] && [ "$HTTP_ENABLED" -eq "1" ]; then
      _iptables -D POSTROUTING -o $IFACE $RULE_HTTP
    fi

    if [ -z "$QUIC_ENABLED" ] || [ "$QUIC_ENABLED" -eq "1" ]; then
      _iptables -D POSTROUTING -o $IFACE $RULE_QUIC
      _iptables -D POSTROUTING -o $IFACE $RULE_MASQ
    fi

    _iptables -D POSTROUTING -o $IFACE $RULE_HTTPS
  done
}

firewall_start_v6() {
  if [ -n "$IPV6_ENABLED" ] && [ "$IPV6_ENABLED" -ne "1" ]; then
    return
  fi

  for IFACE in $ISP_INTERFACE; do
    if [ -n "$HTTP_ENABLED" ] && [ "$HTTP_ENABLED" -eq "1" ]; then
      _ip6tables -A POSTROUTING -o $IFACE $RULE_HTTP
    fi

    if [ -z "$QUIC_ENABLED" ] || [ "$QUIC_ENABLED" -eq "1" ]; then
      _ip6tables -A POSTROUTING -o $IFACE $RULE_QUIC
    fi

    _ip6tables -A POSTROUTING -o $IFACE $RULE_HTTPS
  done
}

firewall_stop_v6() {
  if [ -n "$IPV6_ENABLED" ] && [ "$IPV6_ENABLED" -ne "1" ]; then
    return
  fi

  for IFACE in $ISP_INTERFACE; do
    if [ -n "$HTTP_ENABLED" ] && [ "$HTTP_ENABLED" -eq "1" ]; then
      _ip6tables -D POSTROUTING -o $IFACE $RULE_HTTP
    fi

    if [ -z "$QUIC_ENABLED" ] || [ "$QUIC_ENABLED" -eq "1" ]; then
      _ip6tables -D POSTROUTING -o $IFACE $RULE_QUIC
    fi

    _ip6tables -D POSTROUTING -o $IFACE $RULE_HTTPS
  done
}

firewall_iptables() {
  firewall_start_v4
}

firewall_ip6tables() {
  firewall_start_v6
}

firewall_stop() {
  firewall_stop_v4
  firewall_stop_v6
}

system_config() {
  sysctl -w net.netfilter.nf_conntrack_checksum=0 &> /dev/null
  sysctl -w net.netfilter.nf_conntrack_tcp_be_liberal=1 &> /dev/null
}
