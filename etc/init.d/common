POLICY_RULE="! --mark 0x40000000/0x40000000"

source "$CONFFILE"
if [ -f "$CONFFILE.run" ]; then
  source "$CONFFILE.run"
fi

_RULE_TCP() {
  echo "POSTROUTING -o $IFACE -t mangle -p tcp -m multiport --dports $TCP_PORTS -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:8 -m mark $POLICY_RULE -j NFQUEUE --queue-num $NFQUEUE_NUM --queue-bypass"
}

_RULE_UDP() {
  echo "POSTROUTING -o $IFACE -t mangle -p udp -m multiport --dports $UDP_PORTS -m connbytes --connbytes-dir=original --connbytes-mode=packets --connbytes 1:8 -m mark $POLICY_RULE -j NFQUEUE --queue-num $NFQUEUE_NUM --queue-bypass"
}

_RULE_MASQ() {
  echo "POSTROUTING -o $IFACE -t nat -p udp -m mark --mark 0x40000000/0x40000000 -j MASQUERADE"
}

is_running() {
  PID_RUNNING=$(pgrep -nf "$NFQWS_BIN" 2>/dev/null)

  if [ -z "$PID_RUNNING" ]; then
    return 1
  fi

  if [ ! -f "$PIDFILE" ]; then
    return 1
  fi

  PID_SAVED=$(cat "$PIDFILE" 2>/dev/null)
  if [ "$PID_RUNNING" -ne "$PID_SAVED" ]; then
    return 1
  fi

  if ! kill -0 $PID_SAVED; then
    return 1
  fi

  # 0 = true, 1 = false
  return 0
}

status_service() {
  if is_running; then
    echo 'Service NFQWS is running'
  else
    echo 'Service NFQWS is stopped'
  fi
}

reload_service() {
  if ! is_running; then
    echo 'Service NFQWS is not running' >&2
    return 1
  fi

  echo 'Reloading NFQWS service...'
  kill -1 $(cat "$PIDFILE")
}

create_running_config() {
  _init_policy_rule
  echo "ISP_INTERFACE=\"$ISP_INTERFACE\"" > "$CONFFILE.run"
  echo "IPV6_ENABLED=$IPV6_ENABLED" >> "$CONFFILE.run"
  echo "TCP_PORTS=$TCP_PORTS" >> "$CONFFILE.run"
  echo "UDP_PORTS=$UDP_PORTS" >> "$CONFFILE.run"
  echo "POLICY_NAME=\"$POLICY_NAME\"" >> "$CONFFILE.run"
  echo "POLICY_RULE=\"$POLICY_RULE\"" >> "$CONFFILE.run"
  echo "NFQUEUE_NUM=$NFQUEUE_NUM" >> "$CONFFILE.run"
}

remove_running_config() {
  rm -f "$CONFFILE.run"
  source "$CONFFILE"
}

kernel_modules() {
  KERNEL=$(uname -r)

  # Try to load all modules (OpenWRT or Padavan)
  modprobe -a -q nfnetlink_queue xt_multiport xt_connbytes xt_NFQUEUE &> /dev/null

  if [ -z "$(lsmod 2>/dev/null | grep "nfnetlink_queue ")" ]; then
    nfnetlink_mod_path=$(find "/lib/modules/$KERNEL" -name "nfnetlink_queue.ko*")

    if [ -n "$nfnetlink_mod_path" ]; then
      insmod "$nfnetlink_mod_path" &> /dev/null
      echo "nfnetlink_queue.ko loaded"
    else
      echo "Cannot find nfnetlink_queue.ko module"
    fi
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_multiport ")" ]; then
    multiport_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_multiport.ko*")

    if [ -n "$multiport_mod_path" ]; then
      insmod "$multiport_mod_path" &> /dev/null
      echo "xt_multiport.ko loaded"
    else
      echo "Cannot find xt_multiport.ko module"
    fi
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_connbytes ")" ]; then
    connbytes_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_connbytes.ko*")

    if [ -n "$connbytes_mod_path" ]; then
      insmod "$connbytes_mod_path" &> /dev/null
      echo "xt_connbytes.ko loaded"
    else
      echo "Cannot find xt_connbytes.ko module"
    fi
  fi

  if [ -z "$(lsmod 2>/dev/null | grep "xt_NFQUEUE ")" ]; then
    nfqueue_mod_path=$(find "/lib/modules/$KERNEL" -name "xt_NFQUEUE.ko*")

    if [ -n "$nfqueue_mod_path" ]; then
      insmod "$nfqueue_mod_path" &> /dev/null
      echo "xt_NFQUEUE.ko loaded"
    else
      echo "Cannot find xt_NFQUEUE.ko module"
    fi
  fi
}

_init_policy_rule() {
  local MARK=$(ndmc -c show ip policy 2>&1 | grep -i "description = $POLICY_NAME:" -A 1 | grep 'mark:' | grep -o '[^ ]*$' | head -n 1)
  if [ -n "$MARK" ]; then
    POLICY_RULE="--mark 0x$MARK"
    echo "Found policy '$POLICY_NAME'. Only traffic from it will be processed."
  else
    POLICY_RULE="! --mark 0x40000000/0x40000000"
    echo "Policy '$POLICY_NAME' not found. All traffic will be processed."
  fi
}

_startup_args() {
  local args="--user=$USER --qnum=$NFQUEUE_NUM"

  # Logging
  if [ "$LOG_LEVEL" -eq "1" ]; then
    args="--debug=syslog $args"
  fi

  # UDP
  if [ -n "$NFQWS_ARGS_UDP" ]; then
    args="$args $NFQWS_ARGS_UDP --new"
  fi

  # QUIC
  if [ -n "$NFQWS_ARGS_QUIC" ]; then
    args="$args $NFQWS_ARGS_QUIC $NFQWS_EXTRA_ARGS --new"
  fi

  # HTTP(S)
  args="$args $NFQWS_ARGS $NFQWS_EXTRA_ARGS"

  echo "$args"
}

_iptables_add_remove() {
  CMD=$1 # iptables or ip6tables
  ACTION=$2 # -I, -A, -D
  shift 2
  RULE="$@"

  $CMD -C $RULE 2>/dev/null
  exists=$? # 0 = true

  if [ "$ACTION" == "-A" ] || [ "$ACTION" == "-I" ]; then
    if [ $exists -ne 0 ]; then
      $CMD $ACTION $RULE
    fi
  elif [ "$ACTION" == "-D" ] && [ $exists -eq 0 ]; then
    $CMD $ACTION $RULE
  fi
}

_iptables() {
  _iptables_add_remove iptables "$@"
}

_ip6tables() {
  _iptables_add_remove ip6tables "$@"
}

firewall_start_v4() {
  for IFACE in $ISP_INTERFACE; do
    if [ -n "$UDP_PORTS" ]; then
      _iptables -A "$(_RULE_UDP)"
      _iptables -A "$(_RULE_MASQ)"
    fi

    if [ -n "$TCP_PORTS" ]; then
      _iptables -A "$(_RULE_TCP)"
    fi
  done
}

firewall_stop_v4() {
  for IFACE in $ISP_INTERFACE; do
    if [ -n "$UDP_PORTS" ]; then
      _iptables -D "$(_RULE_UDP)"
      _iptables -D "$(_RULE_MASQ)"
    fi

    if [ -n "$TCP_PORTS" ]; then
      _iptables -D "$(_RULE_TCP)"
    fi
  done
}

firewall_start_v6() {
  if [ -n "$IPV6_ENABLED" ] && [ "$IPV6_ENABLED" -ne "1" ]; then
    return
  fi

  for IFACE in $ISP_INTERFACE; do
    if [ -n "$UDP_PORTS" ]; then
      _ip6tables -A "$(_RULE_UDP)"
    fi

    if [ -n "$TCP_PORTS" ]; then
      _ip6tables -A "$(_RULE_TCP)"
    fi
  done
}

firewall_stop_v6() {
  if [ -n "$IPV6_ENABLED" ] && [ "$IPV6_ENABLED" -ne "1" ]; then
    return
  fi

  for IFACE in $ISP_INTERFACE; do
    if [ -n "$UDP_PORTS" ]; then
      _ip6tables -D "$(_RULE_UDP)"
    fi

    if [ -n "$TCP_PORTS" ]; then
      _ip6tables -D "$(_RULE_TCP)"
    fi
  done
}

firewall_iptables() {
  firewall_start_v4
}

firewall_ip6tables() {
  firewall_start_v6
}

firewall_stop() {
  firewall_stop_v4
  firewall_stop_v6
}

system_config() {
  sysctl -w net.netfilter.nf_conntrack_checksum=0 &> /dev/null
  sysctl -w net.netfilter.nf_conntrack_tcp_be_liberal=1 &> /dev/null
}
