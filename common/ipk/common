#!/bin/sh

CONFDIR="${ROOT_DIR}/etc/nfqws"
CONFFILE=$CONFDIR/nfqws.conf
LISTFILE=$CONFDIR/user.list
LISTAUTOFILE=$CONFDIR/auto.list
LISTEXCLUDEFILE=$CONFDIR/exclude.list
LISTLOG="${ROOT_DIR}/var/log/nfqws.log"
INIT_SCRIPT="${ROOT_DIR}/etc/init.d/S51nfqws"
NFQWS_BIN="${ROOT_DIR}/usr/bin/nfqws"

stop_func() {
  if [ -f "$INIT_SCRIPT" ]; then
    $INIT_SCRIPT stop
  fi
}

start_func() {
  if [ -f "$INIT_SCRIPT" ]; then
    $INIT_SCRIPT start
  fi
}

show_interfaces_func() {
  echo -e "\n----------------------"
  ip addr show | awk -F" |/" '{gsub(/^ +/,"")}/inet /{print $(NF), $2}'
}

config_interface_func() {
  DEF_IFACE=$(route | grep '^default' | grep -o '[^ ]*$')
  if [ -z "$DEF_IFACE" ]; then
    DEF_IFACE="eth3"
  fi
  if [ -z "$BIND_IFACE" ]; then
    echo -e "\nEnter the provider interface name from the list above, e.g. $DEF_IFACE (default) or ppp0"
    echo "You can specify multiple interfaces separated by space, e.g. eth3 ppp0"
    read BIND_IFACE
  fi
  if [ -z "$BIND_IFACE" ]; then
    BIND_IFACE="$DEF_IFACE"
  fi
  echo "Selected interface: $BIND_IFACE"

  sed -i "s#INPUT_ISP_INTERFACE#$BIND_IFACE#" $CONFFILE
}

config_select_mode_func() {
  if [ -z "$MODE" ]; then
    echo -e "\nSelect working mode: auto (default), list, all"
    echo "  auto - automatically detects blocked resources and adds them to the list"
    echo "  list - applies rules only to domains in the list $LISTFILE"
    echo "  all  - applies rules to all traffic except domains from list $LISTEXCLUDEFILE"
    read MODE
  fi

  if [ "$MODE" == "list" ]; then
    EXTRA_ARGS="--hostlist=$LISTFILE"
  elif [ "$MODE" == "all" ]; then
    EXTRA_ARGS="--hostlist-exclude=$LISTEXCLUDEFILE"
  else
    MODE="auto"
    EXTRA_ARGS="--hostlist=$LISTFILE --hostlist-auto=$LISTAUTOFILE --hostlist-auto-debug=$LISTLOG --hostlist-exclude=$LISTEXCLUDEFILE"
  fi
  echo "Selected mode: $MODE"

  sed -i "s#INPUT_EXTRA_ARGS#$EXTRA_ARGS#" $CONFFILE
}

config_ipv6_func() {
  echo -e "\nDisable IPv6 support (enabled by default)? y/N"
  read yn
  case $yn in
    [Yy]* )
      sed -i "s#IPV6_ENABLED=1#IPV6_ENABLED=0#" $CONFFILE
      ;;
  esac
}

install_func() {
  NFQWS_INSTALL_TYPE="install"
  if [ -f "${ROOT_DIR}/tmp/nfqws_install_type" ]; then
    # Set in preinst script
    NFQWS_INSTALL_TYPE=$(cat "${ROOT_DIR}/tmp/nfqws_install_type")
    rm -f "${ROOT_DIR}/tmp/nfqws_install_type"
  fi

  case "$NFQWS_INSTALL_TYPE" in
    install)
      # Setup ISP interface
      show_interfaces_func
      config_interface_func

      # Setup working mode
      config_select_mode_func

      # Setup IPv6 support
      config_ipv6_func

      echo "Installation successful"
      ;;
    *)
      # Do nothing
      ;;
  esac
}

remove_binary_func() {
  rm -f "$NFQWS_BIN"
}

remove_all_files_func() {
  rm -f $LISTLOG
  echo -e "\nRemove lists and config? y/N"
  read yn
  case $yn in
    [Yy]* )
      rm -rf $CONFDIR
      ;;
  esac
}

install_binary_func() {
  OPKG_CONF="${ROOT_DIR}/etc/opkg.conf"

  if [ -f "$OPKG_CONF" ]; then
    ARCH=$(cat "$OPKG_CONF" | grep -oE 'mips-3|mips_|mipsel-3|mipsel_|aarch64-3|aarch64_|armv7' | head -n 1)
    case "$ARCH" in
      "mips-3"|"mips_") ARCH="mips" ;;
      "mipsel-3"|"mipsel_") ARCH="mipsel" ;;
      "aarch64-3"|"aarch64_") ARCH="aarch64" ;;
      "armv7") ARCH="armv7" ;;
    esac
  fi

  if [ -z $ARCH ]; then
    ARCH=$(uname -m | grep -oE 'mips|mipsel|aarch64|armv7')
    if [ "$ARCH" == "mips" ]; then
      if grep -qE 'system type.*MediaTek' /proc/cpuinfo; then
        ARCH="mipsel"
      fi
    fi
  fi

  if [ -z $ARCH ]; then
    echo "Failed to detect architecture"
    exit 1
  fi

  echo "Detected arch: $ARCH"

  cp -f "${ROOT_DIR}/tmp/nfqws_binary/nfqws-$ARCH" "${ROOT_DIR}/usr/bin/nfqws"
  chmod +x "${ROOT_DIR}/usr/bin/nfqws"
  rm -rf "${ROOT_DIR}/tmp/nfqws_binary"
}
